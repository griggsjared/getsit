package template

import "context"

type colorModeCtxKey string

var ColorModeCtxKey = colorModeCtxKey("color-mode")

func colorMode(ctx context.Context) string {
	if mode, ok := ctx.Value(ColorModeCtxKey).(string); ok {
		return mode
	}
	return "dark"
}

templ layout(title string) {
	<!DOCTYPE html>
	<html lang="en" class="h-full">
		<head>
			<title>
				if title != "" {
					{ title } -
				}
				it.getsit - it makes your URLs... shorter
			</title>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<meta name="description" content="it.getsit - it makes your URLs... shorter"/>
			<link rel="preconnect" href="https://fonts.googleapis.com"/>
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
			<link href="https://fonts.googleapis.com/css2?family=Figtree:ital,wght@0,300..900;1,300..900&display=swap" rel="stylesheet"/>
			<link rel="stylesheet" href={ "/assets/main.css?" + assetVersion }/>
			<link rel="icon" type="image/png" sizes="32x32" href={ "/assets/favicon.png?" + assetVersion }/>
			<script>let FF_FOUC_FIX;</script>
		</head>
		<body class={ "h-full w-full", colorMode(ctx) }>
			<div class="h-full pt-4 antialiased  text-foreground bg-background flex flex-col">
				@header(headerConfig{logoSize: logoSizeNormal})
				<div class="max-w-2xl mx-auto flex-grow py-12 w-full px-4">
					{ children... }
				</div>
				@footer()
			</div>
			<script>
				document.getElementById("color-mode").addEventListener("click", () => {
					document.body.classList.toggle("dark");
					document.getElementById("color-mode").innerText = document.body.classList.contains("dark") ? "Light Mode" : "Dark Mode";
					document.cookie = "color-mode=" + (document.body.classList.contains("dark") ? 'dark' : 'light') + "; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/; SameSite=Lax";
				});
			</script>
		</body>
	</html>
}

type headerConfig struct {
	logoSize logoSize
}

templ header(c headerConfig) {
	<header class="max-w-2xl mx-auto pace-y-2 w-full px-4">
		<a href="/" class="block">
			@logo(logoConfig{size: c.logoSize, hasHoverStyles: true})
		</a>
		<div class="text-xl font-bold">it makes your URLs... shorter</div>
	</header>
}

templ footer() {
	<footer class="bg-gray-dark/15 dark:bg-gray-light/10 w-full">
		<div class="max-w-2xl mx-auto flex justify-between items-center w-full py-2 px-4">
			<div class="text-gray-dark dark:text-gray-light flex gap-2 items-center">
				<a href="/" class="block">
					@logo(logoConfig{size: logoSizeSmall})
				</a>
				<span class="font-bold">&copy; 2024</span>
			</div>
			<button type="button" id="color-mode" class="hover:text-green font-bold">
				if colorMode(ctx) == "light" {
					Dark Mode
				} else {
					Light Mode
				}
			</button>
		</div>
	</footer>
}

templ message(message string) {
	<div id="message">
		if message != "" {
			<div class="py-1 px-2 border-l border-error border-l-4 font-bold first-letter:uppercase bg-gray-dark/15 dark:bg-gray-light/10">{ message }</div>
		}
	</div>
}

templ errors(errors map[string]string) {
	<div id="errors">
		if len(errors) > 0 {
			<ul class="py-1 px-2 border-l border-error border-l-4 font-bold bg-gray-dark/15 dark:bg-gray-light/10 rounded">
				for _ , value := range errors {
					<li class="first-letter:uppercase">{ value }</li>
				}
			</ul>
		}
	</div>
}

type buttonConfig struct {
	text       string
	className  string
	buttonType string
	href       string
}

const buttonBaseClassName string = "py-1.5 px-6 text-center border border-green bg-green hover:bg-green/50 text-gray-dark hover:text-gray-light font-bold uppercase text-lg rounded"

templ button(c buttonConfig) {
	if c.href != "" {
		<a
			class={ buttonBaseClassName, c.className }
			href={ templ.SafeURL(c.href) }
		>
			{ c.text }
		</a>
	} else {
		<button
			class={ buttonBaseClassName, c.className }
			type={ c.buttonType }
		>
			{ c.text }
		</button>
	}
}
