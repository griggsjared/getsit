package template

import "strconv"

func getFlashInput(inputs map[string]string, key string, def string) string {
	if val, ok := inputs[key]; ok {
		return val
	}
	return def
}

type HomepageViewModel struct {
	CsrfToken string
	Message   string
	Errors    map[string]string
	Inputs    map[string]string
}

templ Homepage(vm HomepageViewModel) {
	@layout("") {
		<div class="space-y-4">
			@message(vm.Message)
			@errors(vm.Errors)
			<div class="p-2 rounded bg-gray-dark/15 dark:bg-gray-light/10">
				<form action="/create" method="post" novalidate>
					<input type="hidden" name="csrf_token" value={ vm.CsrfToken }/>
					<div class="flex justify-start items-center gap-2">
						<input type="url" name="url" value={ getFlashInput(vm.Inputs, "url", "") } class="w-full p-2 bg-gray-light border border-gray-light rounded text-gray focus:border-green focus:ring-green" placeholder="Enter URL"/>
						@button(buttonConfig{text: "Get It", buttonType: "submit", className: "flex-shrink-0"})
					</div>
				</form>
			</div>
			<div class="space-y-2 py-4">
				<p>Enter a url above to get a shorter version that you can easily share with others. Unless it was already really short, in which case it will probably be longer.</p>
			</div>
		</div>
	}
}

type InfoViewModel struct {
	ShortUrl          string
	ShortUrlWithProto string
	Url               string
	Token             string
	QRCode            string
	VisitCount        int
}

templ Info(vm InfoViewModel) {
	@layout(vm.Token) {
		<div class="space-y-4">
			<div class="py-2 px-4 rounded bg-gray-dark/15 dark:bg-gray-light/10 text-2xl font-bold flex gap-2 justify-between items-center">
				<div class="flex-grow whitespace-nowrap overflow-hidden text-ellipsis">
					<a href={ templ.SafeURL(vm.ShortUrlWithProto) }>{ vm.ShortUrl }</a>
				</div>
				<button type="button" class="hover:text-green flex-grow-0 relative block" data-short-url={ vm.ShortUrlWithProto } id="copy-short-url">
					<span class="sr-only">Copy</span>
					@icon("copy", "w-6 h-6")
					<div class="absolute left-0 right-0 top-full text-xs text-green flex justify-center items-center pt-3 hidden" id="copied-message">
						<span>Copied!</span>
					</div>
				</button>
			</div>
			<script>
				document.getElementById("copy-short-url").addEventListener("click", () => {
					const shortUrl = document.getElementById("copy-short-url").getAttribute("data-short-url");
					navigator.clipboard.writeText(shortUrl).then(() => {
						document.getElementById("copied-message").classList.remove("hidden");
						setTimeout(() => {
							document.getElementById("copied-message").classList.add("hidden");
						}, 2000);
					});
				});
			</script>
			<div class="space-y-1.5">
				<div>{ vm.Url }</div>
				<div>
					if vm.VisitCount != 1 {
						{ strconv.Itoa(vm.VisitCount) } Visits
					} else {
						{ strconv.Itoa(vm.VisitCount) } Visit
					}
				</div>
				<img src={ vm.QRCode } class="border border-4 -m-4 border-green max-w-64 w-full" alt={ "QR Code for " + vm.ShortUrl } width="256" height="256"/>
			</div>
			<div>
				@button(buttonConfig{text: "Get It Again", className: "w-full", href: "/"})
			</div>
		</div>
	}
}

type ServerErrorViewModel struct {
	Code int
	Msg  string
	Desc string
}

templ ServerError(vm ServerErrorViewModel) {
	@layout(vm.Msg) {
		<div class="space-y-4">
			<div>
				<div class="text-2xl font-bold">{ vm.Msg }</div>
				if vm.Desc != "" {
					<div class="text-xl">{ vm.Desc }</div>
				}
			</div>
		</div>
	}
}
